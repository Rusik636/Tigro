from __future__ import annotations

"""–ú–æ–¥—É–ª—å —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤ Telegram-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏.

SRP: –ö–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ
     —Å–ª–æ–≤–∞—Ä—è `markup` –≤ –æ–±—ä–µ–∫—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
OCP:  –ß—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
     –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π BaseRenderer.
LSP:  –í—Å–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–µ—Ç–æ–¥ render).
ISP:  –£–∑–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å BaseRenderer –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
     –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
DIP:  –ö–ª–∏–µ–Ω—Ç (gateway-–±–æ—Ç) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ BaseRenderer,
     –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Aiogram.
"""

from typing import Protocol, Any, Dict, List, Optional

__all__ = ("BaseRenderer", "AiogramRenderer")


class BaseRenderer(Protocol):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞."""

    def render(self, markup: Optional[Dict[str, Any]]) -> Any:  # noqa: D401
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ TgResponse –≤ –æ–±—ä–µ–∫—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞."""
        raise NotImplementedError


class AiogramRenderer:  # noqa: D101 ‚Äì –ø—É–±–ª–∏—á–Ω—ã–π API
    """–†–µ–Ω–¥–µ—Ä–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã –∏–∑ aiogram.types.*"""

    # –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å aiogram
    # –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö.
    def __init__(self) -> None:
        from aiogram.types import (
            InlineKeyboardMarkup,
            InlineKeyboardButton,
            ReplyKeyboardMarkup,
            KeyboardButton,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∞—Å—Å—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ render
        self._InlineKeyboardMarkup = InlineKeyboardMarkup
        self._InlineKeyboardButton = InlineKeyboardButton
        self._ReplyKeyboardMarkup = ReplyKeyboardMarkup
        self._KeyboardButton = KeyboardButton

    # ------------------------------------------------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    # ------------------------------------------------------------------
    def render(self, markup: Optional[Dict[str, Any]]) -> Any:  # noqa: D401
        print(f"[üé® Renderer] –†–µ–Ω–¥–µ—Ä–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {markup}")
        if not markup:
            return None

        if "inline_keyboard" in markup:
            result = self._build_inline(markup["inline_keyboard"])  # type: ignore[arg-type]
            print(f"[üé® Renderer] –°–æ–∑–¥–∞–Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {result}")
            return result
        if "keyboard" in markup:
            result = self._build_reply(markup["keyboard"])  # type: ignore[arg-type]
            print(f"[üé® Renderer] –°–æ–∑–¥–∞–Ω–∞ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {result}")
            return result

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ä–∞–±–æ—Ç—É
        print(f"[üé® Renderer] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {markup}")
        return None

    # ------------------------------------------------------------------
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------------------------------------------
    def _build_inline(self, data: List[List[Dict[str, Any]]]):
        # data –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤, —Ç–∞–∫ –∏ dict —Å meta
        row_width = None
        if isinstance(data, dict):
            row_width = data.get("row_width")
            rows_source = data.get("inline_keyboard", [])
        else:
            rows_source = data

        buttons_rows = []
        for row in rows_source:
            btn_row = [
                self._InlineKeyboardButton(
                    text=btn.get("text", ""),
                    callback_data=btn.get("callback_data"),
                    url=btn.get("url"),
                )
                for btn in row
            ]
            buttons_rows.append(btn_row)

        return self._InlineKeyboardMarkup(
            inline_keyboard=buttons_rows,
            row_width=row_width or len(buttons_rows[0]) if buttons_rows else 3,
        )

    def _build_reply(self, data: List[List[Dict[str, Any]]]):
        buttons_rows = []
        for row in data:
            btn_row = [
                self._KeyboardButton(text=btn.get("text", ""))
                for btn in row
            ]
            buttons_rows.append(btn_row)

        return self._ReplyKeyboardMarkup(
            keyboard=buttons_rows,
            resize_keyboard=True,
        ) 