from __future__ import annotations

import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from tigro.schemas import TgEvent
from tigro.renderers import AiogramRenderer

from .rpc import RpcClient

__all__ = ("AiogramGateway", "run_gateway")


class AiogramGateway:
    """Gateway-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Aiogram –∏ Tigro."""

    def __init__(
        self,
        token: str,
        broker_url: str = "amqp://guest:guest@localhost/",
        renderer: Optional[AiogramRenderer] = None,
    ) -> None:
        self._bot = Bot(token)
        self._dp = Dispatcher(storage=MemoryStorage())
        self._rpc = RpcClient(broker_url)
        self._renderer = renderer or AiogramRenderer()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π message-handler
        self._dp.message()(self._on_message)
        self._dp.callback_query()(self._on_callback)
        print("[üîß Gateway] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: message –∏ callback_query")

    # ------------------------------------------------------------------
    # –ü—É–±–ª–∏—á–Ω—ã–π API
    # ------------------------------------------------------------------
    async def run(self) -> None:  # noqa: D401
        print("[üöÄ Gateway] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await self._rpc.start()
        print("[üöÄ Gateway] RPC –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling...")
        await self._dp.start_polling(self._bot)

    # ------------------------------------------------------------------
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------------------------------------------
    async def _on_message(self, message: Message, state: FSMContext):  # noqa: WPS110
        print(f"[üì® Gateway] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text!r} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º TgEvent
        event = TgEvent(
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=message.text,
            state=await state.get_state(),
            event_type="message",
        )

        # 2. RPC-–≤—ã–∑–æ–≤
        try:
            resp = await self._rpc.call(event)
        except asyncio.TimeoutError:
            return await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")

        # 3. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if resp.action == "send_message":
            await message.answer(
                resp.text or "",
                reply_markup=self._renderer.render(resp.markup),
                parse_mode=resp.parse_mode,
            )

    async def _on_callback(self, cq: CallbackQuery, state: FSMContext):  # noqa: WPS110
        print(f"[üì≤ Gateway] Callback data={cq.data!r} from user={cq.from_user.id}")
        print(f"[üì≤ Gateway] Callback details: message_id={cq.message.message_id if cq.message else None}, chat_id={cq.message.chat.id if cq.message else None}")
        
        event = TgEvent(
            user_id=cq.from_user.id,
            chat_id=cq.message.chat.id if cq.message else cq.from_user.id,
            message_id=cq.message.message_id if cq.message else None,
            callback_data=cq.data,
            state=await state.get_state(),
            event_type="callback",
        )
        
        print(f"[üì≤ Gateway] –°–æ–∑–¥–∞–Ω TgEvent: {event.model_dump()}")

        try:
            resp = await self._rpc.call(event)
            print(f"[üì¨ Gateway] RPC-–æ—Ç–≤–µ—Ç: {resp.model_dump()}")
        except asyncio.TimeoutError:
            await cq.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª", show_alert=True)
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if resp.action == "answer_callback":
            await cq.answer(resp.text or "")
        elif resp.action == "edit_message" and cq.message:
            await cq.message.edit_text(
                resp.text or "",
                reply_markup=self._renderer.render(resp.markup),
                parse_mode=resp.parse_mode,
            )
        elif resp.action == "send_message":
            await cq.message.answer(
                resp.text or "",
                reply_markup=self._renderer.render(resp.markup),
                parse_mode=resp.parse_mode,
            )


# ----------------------------------------------------------------------
# –£–¥–æ–±–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
# ----------------------------------------------------------------------
async def _run(token: str, broker_url: str):
    gateway = AiogramGateway(token=token, broker_url=broker_url)
    await gateway.run()


def run_gateway(token: str, broker_url: str = "amqp://guest:guest@localhost/") -> None:  # noqa: D401
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    asyncio.run(_run(token, broker_url)) 