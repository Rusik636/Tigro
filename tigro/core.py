"""
–ö–ª—é—á–µ–≤–æ–π –º–æ–¥—É–ª—å: Router, Context, ResponseCollector, ResponseDispatcher.

SOLID:
‚Ä¢ SRP  ‚Äì –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –æ–¥–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å;
‚Ä¢ OCP  ‚Äì Router —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ Matcher / Handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞;
‚Ä¢ LSP  ‚Äì –ª—é–±—ã–µ Matcher –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã;
‚Ä¢ ISP  ‚Äì Router –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–∑–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤;
‚Ä¢ DIP  ‚Äì Router –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ ResponsePublisher, –∞ –Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π RabbitMQ.
"""
from __future__ import annotations

from typing import Iterable, Iterator, List, Dict, Any, Literal, cast

from tigro.schemas import TgEvent, TgResponse
from tigro.contracts import (
    Matcher,
    Handler,
    ResponsePublisher,
    Middleware,
    Ctx,
    MessageCommand,
)

__all__ = ("Router", "Context")


# ------------------------------------------------------------------ #
# 1. –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ (Single Responsibility)                       #
# ------------------------------------------------------------------ #
class ResponseCollector:
    """–°–∫–ª–∞–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã—Ö –≤ —Ö–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è."""

    __slots__ = ("_buffer",)

    def __init__(self) -> None:
        self._buffer: List[TgResponse] = []

    def add(self, response: TgResponse) -> None:
        """–ü–æ–º–µ—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±—É—Ñ–µ—Ä."""
        self._buffer.append(response)

    def __iter__(self) -> Iterator[TgResponse]:
        return iter(self._buffer)


# ------------------------------------------------------------------ #
# 2. –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ (SRP + DIP)                                  #
# ------------------------------------------------------------------ #
class ResponseDispatcher:
    """
    –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±—É—Ñ–µ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """

    __slots__ = ("_publisher",)

    def __init__(self, publisher: ResponsePublisher) -> None:
        self._publisher = publisher

    async def dispatch(
        self, user_id: int, responses: Iterable[TgResponse]
    ) -> None:
        for resp in responses:
            await self._publisher.publish(user_id, resp)
        return None


# ------------------------------------------------------------------ #
# 1.1 –ö–æ–º–∞–Ω–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π (SRP, OCP, DIP)                             #
# ------------------------------------------------------------------ #
class SendMessageCommand(MessageCommand):
    def __init__(self, text: str, parse_mode: str = "", **kwargs: Any):
        self.text = text
        self.parse_mode = parse_mode
        self.kwargs = kwargs

    def to_response(self, event: TgEvent) -> TgResponse:
        return TgResponse(
            action="send_message",
            text=self.text,
            correlation_id=event.correlation_id,
            parse_mode=self.parse_mode,
            **self.kwargs,
        )

class EditMessageCommand(MessageCommand):
    def __init__(self, text: str, parse_mode: str = "", message_id: int | None = None, **kwargs: Any):
        self.text = text
        self.parse_mode = parse_mode
        self.message_id = message_id
        self.kwargs = kwargs

    def to_response(self, event: TgEvent) -> TgResponse:
        meta = {"edit_msg_id": self.message_id or event.message_id}
        return TgResponse(
            action="edit_message",
            text=self.text,
            correlation_id=event.correlation_id,
            metadata=meta,
            parse_mode=self.parse_mode,
            **self.kwargs,
        )


# ------------------------------------------------------------------ #
# 3. –ö–æ–Ω—Ç–µ–∫—Å—Ç (SRP)                                                  #
# ------------------------------------------------------------------ #
class Context(Ctx):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã, –Ω–µ –∑–Ω–∞–µ—Ç –æ –±—Ä–æ–∫–µ—Ä–µ.
    """

    __slots__ = ("_event", "_collector")

    def __init__(self, event: TgEvent, collector: ResponseCollector):
        self._event = event
        self._collector = collector

    # ---------- –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------
    async def send_message(self, text: str, parse_mode: str = "", **kwargs: Any) -> None:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´sendMessage¬ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π parse_mode."""
        parse_mode = kwargs.pop("parse_mode", parse_mode)
        cmd = SendMessageCommand(text, parse_mode=parse_mode, **kwargs)
        self._push_command(cmd)
        return None

    async def edit_message(self, text: str, parse_mode: str = "", message_id: int | None = None, **kwargs: Any) -> None:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´editMessageText¬ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π parse_mode."""
        parse_mode = kwargs.pop("parse_mode", parse_mode)
        cmd = EditMessageCommand(text, parse_mode=parse_mode, message_id=message_id, **kwargs)
        self._push_command(cmd)
        return None


    # ---------- –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ ----------
    def _push_command(self, cmd: MessageCommand) -> None:
        self._collector.add(cmd.to_response(self._event))


# ------------------------------------------------------------------ #
# 4. Router (–≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç)                                         #
# ------------------------------------------------------------------ #
class Router:
    """
    –°–æ–µ–¥–∏–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–≤–µ—Ç—ã.

    –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã:
    1. –í—ã–ø–æ–ª–Ω—è–µ—Ç `before`-middlewares.
    2. –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π Matcher, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—é.
    3. –í—ã–∑—ã–≤–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π Handler.
    4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω Handler ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ¬´–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞¬ª.
    5. –ü—É–±–ª–∏–∫—É–µ—Ç –±—É—Ñ–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ ResponseDispatcher.
    6. –í—ã–ø–æ–ª–Ω—è–µ—Ç `after`-middlewares.
    """

    __slots__ = ("_routes", "_dispatcher", "_middlewares")

    def __init__(
        self,
        publisher: ResponsePublisher,
        middlewares: List[Middleware] | None = None,
    ) -> None:
        self._routes: List[tuple[Matcher, Handler]] = []
        self._dispatcher = ResponseDispatcher(publisher)
        self._middlewares = middlewares or []

    # ---------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
    def register(self, matcher: Matcher, handler: Handler) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É ¬´Matcher ‚Üí Handler¬ª."""
        handler_name = getattr(handler, '__name__', str(handler))
        print(f"[üìù Router] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º: {type(matcher).__name__} -> {handler_name}")
        self._routes.append((matcher, handler))

    # ---------- –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ ----------
    async def dispatch(self, event: TgEvent) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ TgEvent."""
        collector = ResponseCollector()
        ctx = Context(event, collector)

        # 1. Pre-middlewares
        for mw in self._middlewares:
            await mw.before(event)

        # 2. –ü–æ–∏—Å–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        handled = False
        print(f"[üîé Router] –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event.event_type}, text='{event.text}', callback_data='{event.callback_data}'")
        for matcher, handler in self._routes:
            match_result = matcher.match(event)
            handler_name = getattr(handler, '__name__', str(handler))
            print(f"[üîé Router] –ü—Ä–æ–≤–µ—Ä—è–µ–º {type(matcher).__name__} -> {handler_name}: {match_result}")
            if match_result:
                print(f"[üöÄ Router] Handler {handler_name} –≤—ã–±—Ä–∞–Ω")
                await handler(ctx)
                handled = True
                break

        if not handled:
            print("[‚ö†Ô∏è Router] –•–µ–Ω–¥–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            await ctx.send_message("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

        # 3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        responses = list(collector)
        await self._dispatcher.dispatch(event.user_id, responses)

        # 4. Post-middlewares
        for mw in self._middlewares:
            await mw.after(event, responses)
